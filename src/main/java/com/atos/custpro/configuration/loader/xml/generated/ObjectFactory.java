package com.atos.custpro.configuration.loader.xml.generated;

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.10.22 at 07:53:49 DU CEST
//

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.atos.custpro.configuration.loader.xml.generated package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.atos.custpro.configuration.loader.xml.generated.
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link RegexAffix }.
     * @return a {@link RegexAffix}
     */
    public RegexAffix createRegexAffix() {
        return new RegexAffix();
    }

    /**
     * Create an instance of {@link Configuration }.
     * @return a {@link Configuration}
     */
    public Configuration createConfiguration() {
        return new Configuration();
    }

    /**
     * Create an instance of {@link Custpro }.
     * @return {@link Custpro} object
     */
    public Custpro createCustpro() {
        return new Custpro();
    }

    /**
     * Create an instance of {@link LiteralAffix }.
     * @return {@link LiteralAffix}
     */
    public LiteralAffix createLiteralAffix() {
        return new LiteralAffix();
    }

}
